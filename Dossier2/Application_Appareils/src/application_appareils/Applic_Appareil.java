/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application_appareils;

import RequeteClient.Article;
import RequeteClient.Client;
import RequeteClient.ReponseClient;
import RequeteClient.RequeteClient;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alex
 */
public class Applic_Appareil extends javax.swing.JFrame {

    String TypeArticle;
    private Socket CSocket;
    private String Login;
    private String Password;
    private String IDClient;
    private List<Article> Panier;
    
    public Applic_Appareil(Socket s,String log,String pass) {
        initComponents();
        CSocket = s;
        Login = log;
        Password = pass;
        Panier =  new ArrayList<Article>();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BuyFrame = new javax.swing.JFrame();
        PayLabel = new javax.swing.JLabel();
        PayComboBox = new javax.swing.JComboBox<>();
        PayButton = new javax.swing.JButton();
        CancelPayButton = new javax.swing.JButton();
        AchatLabel = new javax.swing.JLabel();
        ArticleLabel = new javax.swing.JLabel();
        DeliveryFrame = new javax.swing.JFrame();
        DirectDeliveryRadioButton = new javax.swing.JRadioButton();
        DeliveryRadioButton = new javax.swing.JRadioButton();
        AdressTextField = new javax.swing.JTextField();
        AdressLabel = new javax.swing.JLabel();
        ConfirmDeliveryButton = new javax.swing.JButton();
        CancelDeliveryButton = new javax.swing.JButton();
        DeliveryButtonGroup = new javax.swing.ButtonGroup();
        ClientFrame = new javax.swing.JFrame();
        ExistClientRadioButton = new javax.swing.JRadioButton();
        NewClientRadioButton = new javax.swing.JRadioButton();
        ClientComboBox = new javax.swing.JComboBox<>();
        NameClientLabel = new javax.swing.JLabel();
        SurNameClientLabel = new javax.swing.JLabel();
        NameClientTextField = new javax.swing.JTextField();
        SurnameClientTextField = new javax.swing.JTextField();
        AddressClientLabel = new javax.swing.JLabel();
        AddressClientTextField = new javax.swing.JTextField();
        NumTelLabel = new javax.swing.JLabel();
        NumTeltextField = new javax.swing.JTextField();
        MailClientLabel = new javax.swing.JLabel();
        MailTextField = new javax.swing.JTextField();
        LoginTextField = new javax.swing.JTextField();
        LoginClientLabel = new javax.swing.JLabel();
        PasswordClientLabel = new javax.swing.JLabel();
        PasswordClientTextField = new javax.swing.JPasswordField();
        OKClientButton = new javax.swing.JButton();
        CancelClientButton = new javax.swing.JButton();
        ClientButtonGroup = new javax.swing.ButtonGroup();
        PanierFrame = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        PanierTable = new javax.swing.JTable();
        CommandButton = new javax.swing.JButton();
        EmptyPanierButton = new javax.swing.JButton();
        ListSalesFrame = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListSalesTable = new javax.swing.JTable();
        ArticleSearchLabel = new javax.swing.JLabel();
        ArticleSearchTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ArticleTable = new javax.swing.JTable();
        SearchButton = new javax.swing.JButton();
        BuyButton = new javax.swing.JButton();
        AddPanier = new javax.swing.JButton();
        AccessPanier = new javax.swing.JButton();
        FileMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        ListVenteMenuItem = new javax.swing.JMenuItem();
        LogoutMenuItem = new javax.swing.JMenuItem();

        BuyFrame.setTitle("Mode de paiement");
        BuyFrame.setMinimumSize(new java.awt.Dimension(410, 190));

        PayLabel.setText("Veuillez choisir votre mode de paiement: ");

        PayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Carte Bancaire", "Virement", "Espèce" }));

        PayButton.setText("Valider");
        PayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayButtonActionPerformed(evt);
            }
        });

        CancelPayButton.setText("Annuler");
        CancelPayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelPayButtonActionPerformed(evt);
            }
        });

        AchatLabel.setText("Article: ");

        javax.swing.GroupLayout BuyFrameLayout = new javax.swing.GroupLayout(BuyFrame.getContentPane());
        BuyFrame.getContentPane().setLayout(BuyFrameLayout);
        BuyFrameLayout.setHorizontalGroup(
            BuyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuyFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BuyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PayLabel)
                    .addGroup(BuyFrameLayout.createSequentialGroup()
                        .addComponent(AchatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ArticleLabel))
                    .addGroup(BuyFrameLayout.createSequentialGroup()
                        .addGroup(BuyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BuyFrameLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(PayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BuyFrameLayout.createSequentialGroup()
                                .addComponent(PayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)))
                        .addComponent(CancelPayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        BuyFrameLayout.setVerticalGroup(
            BuyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuyFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(BuyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AchatLabel)
                    .addComponent(ArticleLabel))
                .addGap(18, 18, 18)
                .addComponent(PayLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BuyFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PayButton)
                    .addComponent(CancelPayButton))
                .addGap(33, 33, 33))
        );

        DeliveryFrame.setTitle("Mode de livraison");
        DeliveryFrame.setMinimumSize(new java.awt.Dimension(400, 200));

        DeliveryButtonGroup.add(DirectDeliveryRadioButton);
        DirectDeliveryRadioButton.setText("Embarquement immédiat");

        DeliveryButtonGroup.add(DeliveryRadioButton);
        DeliveryRadioButton.setText("Livraison");
        DeliveryRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                DeliveryRadioButtonStateChanged(evt);
            }
        });

        AdressLabel.setText("Adresse de livraison: ");

        ConfirmDeliveryButton.setText("Confirmer");
        ConfirmDeliveryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmDeliveryButtonActionPerformed(evt);
            }
        });

        CancelDeliveryButton.setText("Annuler");
        CancelDeliveryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelDeliveryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DeliveryFrameLayout = new javax.swing.GroupLayout(DeliveryFrame.getContentPane());
        DeliveryFrame.getContentPane().setLayout(DeliveryFrameLayout);
        DeliveryFrameLayout.setHorizontalGroup(
            DeliveryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeliveryFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DeliveryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DirectDeliveryRadioButton)
                    .addComponent(DeliveryRadioButton)
                    .addGroup(DeliveryFrameLayout.createSequentialGroup()
                        .addComponent(AdressLabel)
                        .addGap(18, 18, 18)
                        .addComponent(AdressTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
            .addGroup(DeliveryFrameLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(ConfirmDeliveryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(CancelDeliveryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DeliveryFrameLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CancelDeliveryButton, ConfirmDeliveryButton});

        DeliveryFrameLayout.setVerticalGroup(
            DeliveryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeliveryFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DirectDeliveryRadioButton)
                .addGap(18, 18, 18)
                .addComponent(DeliveryRadioButton)
                .addGap(18, 18, 18)
                .addGroup(DeliveryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AdressLabel)
                    .addComponent(AdressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(DeliveryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmDeliveryButton)
                    .addComponent(CancelDeliveryButton))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        DeliveryFrameLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CancelDeliveryButton, ConfirmDeliveryButton});

        ClientFrame.setMinimumSize(new java.awt.Dimension(470, 440));

        ClientButtonGroup.add(ExistClientRadioButton);
        ExistClientRadioButton.setText("Compte Existant");
        ExistClientRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ExistClientRadioButtonStateChanged(evt);
            }
        });

        ClientButtonGroup.add(NewClientRadioButton);
        NewClientRadioButton.setText("Nouveu client");

        ClientComboBox.setEnabled(false);
        ClientComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientComboBoxActionPerformed(evt);
            }
        });

        NameClientLabel.setText("Nom: ");

        SurNameClientLabel.setText("Prénom:");

        AddressClientLabel.setText("Adresse: ");

        NumTelLabel.setText("Num. Tel. : ");

        MailClientLabel.setText("E-Mail: ");

        LoginClientLabel.setText("Login: ");

        PasswordClientLabel.setText("Mot de passe: ");

        OKClientButton.setText("Ok");
        OKClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKClientButtonActionPerformed(evt);
            }
        });

        CancelClientButton.setText("Annuler");
        CancelClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelClientButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClientFrameLayout = new javax.swing.GroupLayout(ClientFrame.getContentPane());
        ClientFrame.getContentPane().setLayout(ClientFrameLayout);
        ClientFrameLayout.setHorizontalGroup(
            ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientFrameLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClientFrameLayout.createSequentialGroup()
                        .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ExistClientRadioButton)
                            .addComponent(NewClientRadioButton))
                        .addGap(18, 18, 18)
                        .addComponent(ClientComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(105, 105, 105))
                    .addGroup(ClientFrameLayout.createSequentialGroup()
                        .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ClientFrameLayout.createSequentialGroup()
                                .addComponent(PasswordClientLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ClientFrameLayout.createSequentialGroup()
                                        .addComponent(OKClientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(56, 56, 56)
                                        .addComponent(CancelClientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(PasswordClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(ClientFrameLayout.createSequentialGroup()
                                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AddressClientLabel)
                                    .addComponent(NumTelLabel)
                                    .addComponent(MailClientLabel)
                                    .addComponent(LoginClientLabel)
                                    .addComponent(SurNameClientLabel)
                                    .addComponent(NameClientLabel))
                                .addGap(27, 27, 27)
                                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LoginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NumTeltextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AddressClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SurnameClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NameClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(111, Short.MAX_VALUE))))
        );

        ClientFrameLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CancelClientButton, OKClientButton});

        ClientFrameLayout.setVerticalGroup(
            ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExistClientRadioButton)
                    .addComponent(ClientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NewClientRadioButton)
                .addGap(18, 18, 18)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameClientLabel)
                    .addComponent(NameClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SurNameClientLabel)
                    .addComponent(SurnameClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddressClientLabel)
                    .addComponent(AddressClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumTelLabel)
                    .addComponent(NumTeltextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MailClientLabel)
                    .addComponent(MailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoginClientLabel))
                .addGap(18, 18, 18)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordClientLabel)
                    .addComponent(PasswordClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ClientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OKClientButton)
                    .addComponent(CancelClientButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        PanierFrame.setMinimumSize(new java.awt.Dimension(640, 410));

        PanierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Marque", "Prix", "Quantité"
            }
        ));
        PanierTable.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(PanierTable);
        PanierTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (PanierTable.getColumnModel().getColumnCount() > 0) {
            PanierTable.getColumnModel().getColumn(0).setResizable(false);
            PanierTable.getColumnModel().getColumn(1).setResizable(false);
            PanierTable.getColumnModel().getColumn(2).setResizable(false);
            PanierTable.getColumnModel().getColumn(3).setResizable(false);
        }

        CommandButton.setText("Commander");
        CommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommandButtonActionPerformed(evt);
            }
        });

        EmptyPanierButton.setText("Vider le panier");
        EmptyPanierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmptyPanierButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanierFrameLayout = new javax.swing.GroupLayout(PanierFrame.getContentPane());
        PanierFrame.getContentPane().setLayout(PanierFrameLayout);
        PanierFrameLayout.setHorizontalGroup(
            PanierFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanierFrameLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(CommandButton)
                .addGap(72, 72, 72)
                .addComponent(EmptyPanierButton)
                .addContainerGap(180, Short.MAX_VALUE))
            .addGroup(PanierFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanierFrameLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        PanierFrameLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CommandButton, EmptyPanierButton});

        PanierFrameLayout.setVerticalGroup(
            PanierFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanierFrameLayout.createSequentialGroup()
                .addContainerGap(330, Short.MAX_VALUE)
                .addGroup(PanierFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CommandButton)
                    .addComponent(EmptyPanierButton))
                .addGap(15, 15, 15))
            .addGroup(PanierFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanierFrameLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(58, Short.MAX_VALUE)))
        );

        ListSalesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NumSerie", "Nom", "Marque", "Prix"
            }
        ));
        jScrollPane3.setViewportView(ListSalesTable);
        ListSalesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (ListSalesTable.getColumnModel().getColumnCount() > 0) {
            ListSalesTable.getColumnModel().getColumn(0).setResizable(false);
            ListSalesTable.getColumnModel().getColumn(1).setResizable(false);
            ListSalesTable.getColumnModel().getColumn(2).setResizable(false);
            ListSalesTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout ListSalesFrameLayout = new javax.swing.GroupLayout(ListSalesFrame.getContentPane());
        ListSalesFrame.getContentPane().setLayout(ListSalesFrameLayout);
        ListSalesFrameLayout.setHorizontalGroup(
            ListSalesFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 624, Short.MAX_VALUE)
            .addGroup(ListSalesFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ListSalesFrameLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        ListSalesFrameLayout.setVerticalGroup(
            ListSalesFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 313, Short.MAX_VALUE)
            .addGroup(ListSalesFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ListSalesFrameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ArticleSearchLabel.setText("Nom de l'article: ");

        ArticleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Marque", "Prix", "EtatPaiement", "Quantité"
            }
        ));
        jScrollPane1.setViewportView(ArticleTable);
        if (ArticleTable.getColumnModel().getColumnCount() > 0) {
            ArticleTable.getColumnModel().getColumn(0).setResizable(false);
            ArticleTable.getColumnModel().getColumn(1).setResizable(false);
            ArticleTable.getColumnModel().getColumn(2).setResizable(false);
            ArticleTable.getColumnModel().getColumn(3).setResizable(false);
            ArticleTable.getColumnModel().getColumn(3).setHeaderValue("EtatPaiement");
            ArticleTable.getColumnModel().getColumn(4).setHeaderValue("Quantité");
        }

        SearchButton.setText("Rechercher");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        BuyButton.setText("Acheter");
        BuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyButtonActionPerformed(evt);
            }
        });

        AddPanier.setText("Ajouter au panier");
        AddPanier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPanierActionPerformed(evt);
            }
        });

        AccessPanier.setText("Acceder au panier");
        AccessPanier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccessPanierActionPerformed(evt);
            }
        });

        FileMenu.setText("Fichier");

        ListVenteMenuItem.setText("Listes des articles vendus");
        ListVenteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListVenteMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ListVenteMenuItem);

        LogoutMenuItem.setText("Deconnexion");
        LogoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(LogoutMenuItem);

        FileMenuBar.add(FileMenu);

        setJMenuBar(FileMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ArticleSearchLabel)
                    .addComponent(ArticleSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AccessPanier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AddPanier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BuyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ArticleSearchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ArticleSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BuyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AddPanier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AccessPanier)
                        .addGap(28, 28, 28))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // <editor-fold defaultstate="collapsed" desc="SEARCH_GOOD"> 
    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed

        TypeArticle = ArticleSearchTextField.getText();
        if(TypeArticle.isEmpty())
        {
            String Message = "Pas d'aricle recherché";
            JOptionPane.showMessageDialog(this,Message,"Erreur !",JOptionPane.WARNING_MESSAGE,null);
        }
        else
        {
            initArticleTable(TypeArticle);
        }
    }//GEN-LAST:event_SearchButtonActionPerformed
    // </editor-fold> 
    
    // <editor-fold defaultstate="collapsed" desc="TAKE_GOOD"> 
    private void BuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyButtonActionPerformed
        ReponseClient rep = null;
        
        int SelectedRow = this.ArticleTable.getSelectedRow();
        if(SelectedRow == -1)
        {
            JOptionPane.showMessageDialog(this,"Aucun article sélectionné","Erreur !",JOptionPane.WARNING_MESSAGE,null);
        }
        else
        {
            DefaultTableModel dtm = (DefaultTableModel) this.ArticleTable.getModel();
            String NomArticle = (String) dtm.getValueAt(SelectedRow, 0);

            try
            {
                sendMessage(RequeteClient.TAKE_GOOD,NomArticle);
            }
            catch(IOException e)
            {
                System.err.println("Erreur réseau ? ["+e.getMessage()+"]");
            }
            
            try
            {
                rep = receiveMessage(); 
            } catch (IOException ex) {
                System.err.println("Erreur réseau ? ["+ex.getMessage()+"]");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Applic_Appareil_Login.class.getName()).log(Level.SEVERE, null, ex);
            }

            if(rep.getCode() == 1)
            {
                Article temp = rep.getAchatArticle();
                String Article = ""+temp.getNumSerie() +" " + temp.getNom() + " Prix : "+ temp.getPrix();
                ArticleLabel.setText(Article);
                this.BuyFrame.setVisible(true);
                initArticleTable(TypeArticle);
            }
            else
            {
                JOptionPane.showMessageDialog(this,"L'article n'est malheureusement plus disponible","Erreur !",JOptionPane.WARNING_MESSAGE,null);
            }
        }
        
    }//GEN-LAST:event_BuyButtonActionPerformed
    // </editor-fold> 
    
    // <editor-fold defaultstate="collapsed" desc="BUY_GOOD"> 
    private void PayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayButtonActionPerformed
        String ModePaiement = (String)this.PayComboBox.getSelectedItem();
        ReponseClient rep = null;
        
        try
        {
            sendMessage(RequeteClient.BUY_GOOD,ModePaiement);
        }
        catch(IOException e)
        {
            System.err.println("Erreur réseau ? ["+e.getMessage()+"]");
        }
        
        try
        {
            rep = receiveMessage(); 
        } catch (IOException ex) {
            System.err.println("Erreur réseau ? ["+ex.getMessage()+"]");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Applic_Appareil_Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(rep.getCode() == 1)
        {
            BuyFrame.setVisible(false);
            this.initiateClientComboBox();
            this.ClientFrame.setVisible(true);
            
        }
        
    }//GEN-LAST:event_PayButtonActionPerformed
     // </editor-fold> 
    
    // <editor-fold defaultstate="collapsed" desc="DELIVERY_GOOD: PART ONE"> 
    private void DeliveryRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_DeliveryRadioButtonStateChanged
        if(DeliveryRadioButton.isSelected())
        {
            AdressTextField.setEnabled(true);
            AdressLabel.setEnabled(true);
        }
        else
        {
            AdressTextField.setEnabled(false);
            AdressLabel.setEnabled(false);
        }
    }//GEN-LAST:event_DeliveryRadioButtonStateChanged

    private void ConfirmDeliveryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmDeliveryButtonActionPerformed
        
        ReponseClient rep = null;
        String Delivery = null;
        boolean Send = true;
        if(DeliveryRadioButton.isSelected())
        {
            Delivery = AdressTextField.getText();
            if(Delivery.isEmpty())
            {
                Delivery = "";
                JOptionPane.showMessageDialog(this,"Aucune adresse rentré","Erreur !",JOptionPane.WARNING_MESSAGE,null);
                Send = false;
            }
        }
        if(DirectDeliveryRadioButton.isSelected())
        {
            Delivery = " ";
        }
        
        String Message = IDClient+ "#" + Delivery;
        try
        {
            sendMessage(RequeteClient.DELIVERY_GOOD,Message);
        }
        catch(IOException e)
        {
            System.err.println("Erreur réseau ? ["+e.getMessage()+"]");
        }
        
        try
        {
            rep = receiveMessage(); 
        } catch (IOException ex) {
            System.err.println("Erreur réseau ? ["+ex.getMessage()+"]");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Applic_Appareil_Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(rep.getCode() == 1)
        {
            JOptionPane.showMessageDialog(this,"Votre achat a bien été effectué","Message",JOptionPane.WARNING_MESSAGE,null);
            DeliveryFrame.setVisible(false);
            Panier.removeAll(Panier);
        }
    }//GEN-LAST:event_ConfirmDeliveryButtonActionPerformed
    // </editor-fold> 
    
    // <editor-fold defaultstate="collapsed" desc="GESTION CLIENT"> 
    private void ClientComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientComboBoxActionPerformed
        ReponseClient rep = null;
        
        if(ExistClientRadioButton.isSelected() && ClientFrame.isVisible())
        {
            int index = ClientComboBox.getSelectedIndex();
            String Client = ClientComboBox.getItemAt(index);
            StringTokenizer st = new StringTokenizer(Client," ");
            String ID = st.nextToken();
            IDClient = ID;
            try 
            {
                sendMessage(RequeteClient.SEARCH_CLIENT,ID);
            } 
            catch (IOException ex) {
                Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                rep = receiveMessage();
            } catch (IOException ex) {
                Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
            }

            Client c = rep.getListClient().get(0);

            this.NameClientTextField.setText(c.getNom());
            this.SurnameClientTextField.setText(c.getPrenom());
            this.AddressClientTextField.setText(c.getAdresse());
            this.NumTeltextField.setText(c.getNumTel());
            this.MailTextField.setText(c.getEmail());
            this.LoginTextField.setText(c.getLogin());
            this.PasswordClientTextField.setText(c.getPassWord());
        }
        else
        {
            this.NameClientTextField.setText("");
            this.SurnameClientTextField.setText("");
            this.AddressClientTextField.setText("");
            this.NumTeltextField.setText("");
            this.MailTextField.setText("");
            this.LoginTextField.setText("");
            this.PasswordClientTextField.setText("");
        }
    }//GEN-LAST:event_ClientComboBoxActionPerformed

    private void ExistClientRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ExistClientRadioButtonStateChanged
        if(this.ExistClientRadioButton.isSelected())
        {
            ClientComboBox.setEnabled(true);
        }
        else
        {
            ClientComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_ExistClientRadioButtonStateChanged

    private void OKClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKClientButtonActionPerformed
        ReponseClient rep = null;
        if(this.NameClientTextField.getText().isEmpty() && this.SurnameClientTextField.getText().isEmpty() && this.AddressClientTextField.getText().isEmpty() && (this.NumTeltextField.getText().isEmpty() || this.MailTextField.getText().isEmpty()) && this.LoginTextField.getText().isEmpty() && this.PasswordClientTextField.getText().isEmpty())
            JOptionPane.showMessageDialog(this,"Champ(s) Manquant(s)","Erreur !",JOptionPane.WARNING_MESSAGE,null);
        else
        {
            if(this.NewClientRadioButton.isSelected())
            {
                String Client = NameClientTextField.getText() + "#" + this.SurnameClientTextField.getText() +"#" + this.AddressClientTextField.getText() + "#" + this.NumTeltextField.getText() +"#" + this.MailTextField.getText() + "#" +this.LoginTextField.getText() + "#" + this.PasswordClientTextField.getText();
                try {
                    sendMessage(RequeteClient.NEW_CLIENT,Client);
                } catch (IOException ex) {
                    Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                    rep = receiveMessage();
                            } catch (IOException ex) {
                    Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                IDClient = rep.getChargeUtile();
            }
            ExistClientRadioButton.setSelected(false);
            ClientFrame.setVisible(false);
            DeliveryFrame.setVisible(true);
            AdressTextField.setText(AddressClientTextField.getText()); 
        }
    }//GEN-LAST:event_OKClientButtonActionPerformed

    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="DIVERS"> 
    private void AddPanierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPanierActionPerformed
        ReponseClient rep = null;
        
        int SelectedRow = this.ArticleTable.getSelectedRow();
        if(SelectedRow == -1)
        {
            JOptionPane.showMessageDialog(this,"Aucun article sélectionné","Erreur !",JOptionPane.WARNING_MESSAGE,null);
        }
        else
        {
            DefaultTableModel dtm = (DefaultTableModel) this.ArticleTable.getModel();
            String NomArticle = (String) dtm.getValueAt(SelectedRow, 0);

            try
            {
                sendMessage(RequeteClient.TAKE_GOOD,NomArticle);
            }
            catch(IOException e)
            {
                System.err.println("Erreur réseau ? ["+e.getMessage()+"]");
            }
            
            try
            {
                rep = receiveMessage(); 
            } catch (IOException ex) {
                System.err.println("Erreur réseau ? ["+ex.getMessage()+"]");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Applic_Appareil_Login.class.getName()).log(Level.SEVERE, null, ex);
            }

            if(rep.getCode() == 1)
            {
                Article temp = rep.getAchatArticle();
                boolean find = false;
                for(int i=0;i<Panier.size()&& find == false;i++)
                {
                    if(temp.getNom().equals(Panier.get(i).getNom()))
                    {
                        Panier.get(i).setQuantite(Panier.get(i).getQuantite() + 1);
                        find = true;
                    }
                }
                if(find == false)
                {
                    temp.setQuantite(1);
                    Panier.add(temp);
                }
                initArticleTable(TypeArticle);
                AccessPanierActionPerformed(evt);
            }
            else
            {
                JOptionPane.showMessageDialog(this,"L'article n'est malheureusement plus disponible","Erreur !",JOptionPane.WARNING_MESSAGE,null);
            }
        }
    }//GEN-LAST:event_AddPanierActionPerformed

    private void AccessPanierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccessPanierActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) PanierTable.getModel();
        String[] tempPanier = new String[4];
        
        
        dtm.setRowCount(0);
        for(int i = 0;i<Panier.size(); i++)
        {
            tempPanier[0] = Panier.get(i).getNom();
            tempPanier[1] = Panier.get(i).getMarque();
            tempPanier[2] = "" + Panier.get(i).getPrix();
            tempPanier[3] = "" + Panier.get(i).getQuantite();
            dtm.addRow(tempPanier);
        }
        
        PanierTable.setModel(dtm);
        PanierFrame.setVisible(true);
    }//GEN-LAST:event_AccessPanierActionPerformed

    private void CommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommandButtonActionPerformed
        PanierFrame.setVisible(false);
        BuyFrame.setVisible(true);
    }//GEN-LAST:event_CommandButtonActionPerformed

    private void LogoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutMenuItemActionPerformed
        
        VidePanier();
        String temp =Login+"#"+Password;
        ReponseClient rep = null;
        try {
            sendMessage(RequeteClient.REQUEST_LOGOUT,temp);
        } catch (IOException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            rep = receiveMessage();
                    
                    } catch (IOException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);   
        }
        
        if(rep.getCode() == 1)
        {
            try {
                CSocket.close();
            } catch (IOException ex) {
                Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.exit(1);
            
            
        }
        
    }//GEN-LAST:event_LogoutMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        String temp =Login+"#"+Password;
        ReponseClient rep = null;
        try {
            sendMessage(RequeteClient.REQUEST_LOGOUT,temp);
        } catch (IOException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            rep = receiveMessage();
                    
                    } catch (IOException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);   
        }
        
        if(rep.getCode() == 1)
        {
            try {
                CSocket.close();
            } catch (IOException ex) {
                Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
            }   
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void ListVenteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListVenteMenuItemActionPerformed
        ReponseClient rep = null;
        try {
            sendMessage(RequeteClient.LIST_SALES,"");
        } catch (IOException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            rep = receiveMessage();
        } catch (IOException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        List<Article> ListSales = rep.getListArticle();
        
        DefaultTableModel dtm = (DefaultTableModel) this.ListSalesTable.getModel();
        
        String[] tempSales = new String[4];
        
        dtm.setRowCount(0);
        for(int i = 0;i< ListSales.size();i++)
        {
            Article temp = ListSales.get(i);
            tempSales[0] = "" + temp.getNumSerie();
            tempSales[1] = temp.getNom();
            tempSales[2] = temp.getMarque();
            tempSales[3] = "" + temp.getPrix();
            dtm.addRow(tempSales);
        }
        
        ListSalesTable.setModel(dtm);
        ListSalesFrame.setVisible(true);
        
    }//GEN-LAST:event_ListVenteMenuItemActionPerformed
    
    
    private void CancelPayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelPayButtonActionPerformed
        BuyFrame.setVisible(false);
    }//GEN-LAST:event_CancelPayButtonActionPerformed

    private void CancelDeliveryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelDeliveryButtonActionPerformed
        DeliveryFrame.setVisible(false);
    }//GEN-LAST:event_CancelDeliveryButtonActionPerformed

    private void CancelClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelClientButtonActionPerformed
        ClientFrame.setVisible(false);
    }//GEN-LAST:event_CancelClientButtonActionPerformed

    private void EmptyPanierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmptyPanierButtonActionPerformed
        VidePanier();
        DefaultTableModel dtm = (DefaultTableModel) PanierTable.getModel();
        dtm.setRowCount(0);
        PanierTable.setModel(dtm);
        PanierTable.revalidate();
        initArticleTable(TypeArticle);
        
    }//GEN-LAST:event_EmptyPanierButtonActionPerformed
    
    
    // </editor-fold> 
    
    // <editor-fold defaultstate="collapsed" desc="Send/Receive"> 
    private void sendMessage(int type,String chu) throws IOException
    {
        RequeteClient req = new RequeteClient(type,chu);
        ObjectOutputStream oos = null;

        oos = new ObjectOutputStream(CSocket.getOutputStream());
        oos.writeObject(req);
        oos.flush();
    }
    
    private ReponseClient receiveMessage() throws IOException, ClassNotFoundException
    {
        ReponseClient rep;
        ObjectInputStream ois = null;

        ois = new ObjectInputStream(CSocket.getInputStream());
        rep = (ReponseClient) ois.readObject(); 
        
        return rep;
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="INITIATE"> 
    private void initiateClientComboBox()
    {
        ReponseClient rep = null;
        try
        {
            sendMessage(RequeteClient.ALL_CLIENT,"");
        }
        catch(IOException e)
        {
            System.err.println("Erreur réseau ? ["+e.getMessage()+"]");
        }
        
        try
        {
            rep = receiveMessage(); 
        } catch (IOException ex) {
            System.err.println("Erreur réseau ? ["+ex.getMessage()+"]");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Applic_Appareil_Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        List<Client> listClient = rep.getListClient();
        ClientComboBox.removeAllItems();
        for(int i = 0;i < listClient.size(); i++)
        {
            Client temp = listClient.get(i);
            String Client = "" + temp.getNumClient() + " " + temp.getNom() + " " + temp.getPrenom();
            ClientComboBox.addItem(Client);
        }
        
    }
    
    public void VidePanier()
    {
        Panier.removeAll(Panier);
        ReponseClient rep = null;
        try
        {
            sendMessage(RequeteClient.VIDE_PANIER,"");
        }
        catch(IOException e)
        {
            System.err.println("Erreur réseau ? ["+e.getMessage()+"]");
        }
        try
        {
            rep = receiveMessage(); 
        } catch (IOException ex) {
            System.err.println("Erreur réseau ? ["+ex.getMessage()+"]");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Applic_Appareil_Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    
    private void initArticleTable(String TypeArticle) {
            String chu = TypeArticle;
            ReponseClient rep = null;
            try
            {
                sendMessage(RequeteClient.SEARCH_GOOD,chu);
            }
            catch(IOException e)
            {
                System.err.println("Erreur réseau ? ["+e.getMessage()+"]");
            }
            
            try
            {
                rep = receiveMessage();  
            } catch (IOException ex) {
                System.err.println("Erreur réseau ? ["+ex.getMessage()+"]");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Applic_Appareil_Login.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(rep.getCode() == 1)
            {
                String[] temp = new String[5];
                List<Article> listArticle = rep.getListArticle();
                DefaultTableModel dtm = (DefaultTableModel) ArticleTable.getModel();
                dtm.setRowCount(0);
                for(int i = 0;i<listArticle.size();i++)
                {
                    temp[0] = listArticle.get(i).getNom();
                    temp[1] = listArticle.get(i).getMarque();
                    temp[2] = ""+listArticle.get(i).getPrix(); 
                    temp[3] = listArticle.get(i).getEtatPaiement();
                    temp[4] = ""+listArticle.get(i).getQuantite();
                    dtm.addRow(temp);
                } 
                ArticleTable.setModel(dtm);
            }
            else
            {
                if(rep.getCode() == -1)
                {
                    JOptionPane.showMessageDialog(this,rep.getChargeUtile()+"\nVeuillez quitter l'appliaction","Erreur !",JOptionPane.WARNING_MESSAGE,null);
                }
                else
                    JOptionPane.showMessageDialog(this,"Aucun résultat pour l'article demandé","Erreur !",JOptionPane.WARNING_MESSAGE,null);
            }
    }
    // </editor-fold>
    
    public void StopApplic()
    {
        VidePanier();
        String temp =Login+"#"+Password;
        ReponseClient rep = null;
        try {
            sendMessage(RequeteClient.REQUEST_LOGOUT,temp);
        } catch (IOException ex) 
        {
            System.err.println("Erreur lors du send !: "+ex.getMessage());
        }
        
        try 
        {
            rep = receiveMessage();
                    
        } 
        catch (IOException ex) 
        {
            System.err.println("Erreur lors du receive !: "+ex.getMessage());
        } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(Applic_Appareil.class.getName()).log(Level.SEVERE, null, ex);   
        }
        
        if(rep.getCode() == 1)
        {
            try {
                CSocket.close();
            } catch (IOException ex) {
                System.err.println("Erreur lors du close !: "+ex.getMessage());
            }
            
            System.exit(1);   
        }                 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Applic_Appareil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Applic_Appareil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Applic_Appareil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Applic_Appareil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccessPanier;
    private javax.swing.JLabel AchatLabel;
    private javax.swing.JButton AddPanier;
    private javax.swing.JLabel AddressClientLabel;
    private javax.swing.JTextField AddressClientTextField;
    private javax.swing.JLabel AdressLabel;
    private javax.swing.JTextField AdressTextField;
    private javax.swing.JLabel ArticleLabel;
    private javax.swing.JLabel ArticleSearchLabel;
    private javax.swing.JTextField ArticleSearchTextField;
    private javax.swing.JTable ArticleTable;
    private javax.swing.JButton BuyButton;
    private javax.swing.JFrame BuyFrame;
    private javax.swing.JButton CancelClientButton;
    private javax.swing.JButton CancelDeliveryButton;
    private javax.swing.JButton CancelPayButton;
    private javax.swing.ButtonGroup ClientButtonGroup;
    private javax.swing.JComboBox<String> ClientComboBox;
    private javax.swing.JFrame ClientFrame;
    private javax.swing.JButton CommandButton;
    private javax.swing.JButton ConfirmDeliveryButton;
    private javax.swing.ButtonGroup DeliveryButtonGroup;
    private javax.swing.JFrame DeliveryFrame;
    private javax.swing.JRadioButton DeliveryRadioButton;
    private javax.swing.JRadioButton DirectDeliveryRadioButton;
    private javax.swing.JButton EmptyPanierButton;
    private javax.swing.JRadioButton ExistClientRadioButton;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuBar FileMenuBar;
    private javax.swing.JFrame ListSalesFrame;
    private javax.swing.JTable ListSalesTable;
    private javax.swing.JMenuItem ListVenteMenuItem;
    private javax.swing.JLabel LoginClientLabel;
    private javax.swing.JTextField LoginTextField;
    private javax.swing.JMenuItem LogoutMenuItem;
    private javax.swing.JLabel MailClientLabel;
    private javax.swing.JTextField MailTextField;
    private javax.swing.JLabel NameClientLabel;
    private javax.swing.JTextField NameClientTextField;
    private javax.swing.JRadioButton NewClientRadioButton;
    private javax.swing.JLabel NumTelLabel;
    private javax.swing.JTextField NumTeltextField;
    private javax.swing.JButton OKClientButton;
    private javax.swing.JFrame PanierFrame;
    private javax.swing.JTable PanierTable;
    private javax.swing.JLabel PasswordClientLabel;
    private javax.swing.JPasswordField PasswordClientTextField;
    private javax.swing.JButton PayButton;
    private javax.swing.JComboBox<String> PayComboBox;
    private javax.swing.JLabel PayLabel;
    private javax.swing.JButton SearchButton;
    private javax.swing.JLabel SurNameClientLabel;
    private javax.swing.JTextField SurnameClientTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    
}
